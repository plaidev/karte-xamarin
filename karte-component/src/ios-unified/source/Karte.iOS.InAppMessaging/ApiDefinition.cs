using Foundation;
using Karte.iOS.InAppMessaging;
using ObjCRuntime;
using UIKit;
using WebKit;

namespace Karte.iOS.InAppMessaging
{
    // @interface KRTInAppMessaging : NSObject
   [BaseType(typeof(NSObject))]
   [DisableDefaultCtor]
    interface KRTInAppMessaging
    {
        // @property (readonly, nonatomic, strong, class) KRTInAppMessaging * _Nonnull shared;
        [Static]
        [Export("shared", ArgumentSemantic.Strong)]
        KRTInAppMessaging Shared { get; }

        [Wrap("WeakDelegate")]
        [NullAllowed]
        KRTInAppMessagingDelegate Delegate { get; set; }

        // @property (nonatomic, weak) id<KRTInAppMessagingDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
        NSObject WeakDelegate { get; set; }

        // @property (nonatomic, strong) WKProcessPool * _Nullable processPool;
        [NullAllowed, Export("processPool", ArgumentSemantic.Strong)]
        WKProcessPool ProcessPool { get; set; }

        // @property (readonly, nonatomic) BOOL isPresenting;
        [Export("isPresenting")]
        bool IsPresenting { get; }

        // +(void)_krt_load;
        [Static]
        [Export("_krt_load")]
        void _krt_load();

        // -(BOOL)isPresentingWithView:(UIView * _Nonnull)view __attribute__((warn_unused_result("")));
        [Export("isPresentingWithView:")]
        bool IsPresentingWithView(UIView view);

        // -(void)dismiss;
        [Export("dismiss")]
        void Dismiss();

        // -(void)dismissWithView:(UIView * _Nonnull)view;
        [Export("dismissWithView:")]
        void DismissWithView(UIView view);

        // -(void)suppress;
        [Export("suppress")]
        void Suppress();

        // -(void)suppressWithView:(UIView * _Nonnull)view;
        [Export("suppressWithView:")]
        void SuppressWithView(UIView view);

        // -(void)unsuppress;
        [Export("unsuppress")]
        void Unsuppress();

        // -(void)unsuppressWithView:(UIView * _Nonnull)view;
        [Export("unsuppressWithView:")]
        void UnsuppressWithView(UIView view);
    }

    // @protocol KRTInAppMessagingDelegate
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface KRTInAppMessagingDelegate
    {
        // @optional -(void)inAppMessagingWindowIsPresented:(KRTInAppMessaging * _Nonnull)inAppMessaging;
        [Export("inAppMessagingWindowIsPresented:")]
        void InAppMessagingWindowIsPresented(KRTInAppMessaging inAppMessaging);

        // @optional -(void)inAppMessagingWindowIsPresented:(KRTInAppMessaging * _Nonnull)inAppMessaging onScene:(UIScene * _Nonnull)scene __attribute__((availability(ios, introduced=13.0)));
        [iOS(13, 0)]
        [Export("inAppMessagingWindowIsPresented:onScene:")]
        void InAppMessagingWindowIsPresented(KRTInAppMessaging inAppMessaging, UIScene scene);

        // @optional -(void)inAppMessagingWindowIsDismissed:(KRTInAppMessaging * _Nonnull)inAppMessaging;
        [Export("inAppMessagingWindowIsDismissed:")]
        void InAppMessagingWindowIsDismissed(KRTInAppMessaging inAppMessaging);

        // @optional -(void)inAppMessagingWindowIsDismissed:(KRTInAppMessaging * _Nonnull)inAppMessaging onScene:(UIScene * _Nonnull)scene __attribute__((availability(ios, introduced=13.0)));
        [iOS(13, 0)]
        [Export("inAppMessagingWindowIsDismissed:onScene:")]
        void InAppMessagingWindowIsDismissed(KRTInAppMessaging inAppMessaging, UIScene scene);

        // @optional -(void)inAppMessagingIsPresented:(KRTInAppMessaging * _Nonnull)inAppMessaging campaignId:(NSString * _Nonnull)campaignId shortenId:(NSString * _Nonnull)shortenId;
        [Export("inAppMessagingIsPresented:campaignId:shortenId:")]
        void InAppMessagingIsPresented(KRTInAppMessaging inAppMessaging, string campaignId, string shortenId);

        // @optional -(void)inAppMessagingIsPresented:(KRTInAppMessaging * _Nonnull)inAppMessaging campaignId:(NSString * _Nonnull)campaignId shortenId:(NSString * _Nonnull)shortenId onScene:(UIScene * _Nonnull)scene __attribute__((availability(ios, introduced=13.0)));
        [iOS(13, 0)]
        [Export("inAppMessagingIsPresented:campaignId:shortenId:onScene:")]
        void InAppMessagingIsPresented(KRTInAppMessaging inAppMessaging, string campaignId, string shortenId, UIScene scene);

        // @optional -(void)inAppMessagingIsDismissed:(KRTInAppMessaging * _Nonnull)inAppMessaging campaignId:(NSString * _Nonnull)campaignId shortenId:(NSString * _Nonnull)shortenId;
        [Export("inAppMessagingIsDismissed:campaignId:shortenId:")]
        void InAppMessagingIsDismissed(KRTInAppMessaging inAppMessaging, string campaignId, string shortenId);

        // @optional -(void)inAppMessagingIsDismissed:(KRTInAppMessaging * _Nonnull)inAppMessaging campaignId:(NSString * _Nonnull)campaignId shortenId:(NSString * _Nonnull)shortenId onScene:(UIScene * _Nonnull)scene __attribute__((availability(ios, introduced=13.0)));
        [iOS(13, 0)]
        [Export("inAppMessagingIsDismissed:campaignId:shortenId:onScene:")]
        void InAppMessagingIsDismissed(KRTInAppMessaging inAppMessaging, string campaignId, string shortenId, UIScene scene);

        // @optional -(BOOL)inAppMessaging:(KRTInAppMessaging * _Nonnull)inAppMessaging shouldOpenURL:(NSURL * _Nonnull)url __attribute__((warn_unused_result("")));
        [Export("inAppMessaging:shouldOpenURL:")]
        bool InAppMessaging(KRTInAppMessaging inAppMessaging, NSUrl url);

        // @optional -(BOOL)inAppMessaging:(KRTInAppMessaging * _Nonnull)inAppMessaging shouldOpenURL:(NSURL * _Nonnull)url onScene:(UIScene * _Nonnull)scene __attribute__((warn_unused_result(""))) __attribute__((availability(ios, introduced=13.0)));
        [iOS(13, 0)]
        [Export("inAppMessaging:shouldOpenURL:onScene:")]
        bool InAppMessaging(KRTInAppMessaging inAppMessaging, NSUrl url, UIScene scene);
    }

}

