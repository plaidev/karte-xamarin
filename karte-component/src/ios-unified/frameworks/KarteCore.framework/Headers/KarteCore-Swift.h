#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef KARTECORE_SWIFT_H
#define KARTECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KarteCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// コマンドスキームを処理するためのクラスです。
/// <em>SDK内部で利用するクラスであり、通常のSDK利用でこちらのクラスを利用することはありません。</em>
SWIFT_CLASS_NAMED("CommandHandler")
@interface KRTCommandHandler : NSObject
/// ローダークラスが Objective-Cランライムに追加されたタイミングで呼び出されるメソッドです。
/// 本メソッドが呼び出されたタイミングで、<code>KarteApp</code> クラスに本クラスをライブラリとして登録します。
+ (void)_krt_load;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class NSString;
@class NSURL;
@protocol LibraryConfiguration;
@protocol KRTIDFADelegate;

/// SDKの設定を保持するクラスです。
SWIFT_CLASS_NAMED("Configuration")
@interface KRTConfiguration : NSObject <NSCopying>
/// プロジェクト直下の  Karte-Info.plist をロードしてデフォルト値で初期化された設定インスタンスを返します。
/// Karte-Info.plist が存在しない場合は nil が返ります。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) KRTConfiguration * _Nullable default_;)
+ (KRTConfiguration * _Nullable)default SWIFT_WARN_UNUSED_RESULT;
/// デフォルト値で初期化された設定インスタンスを返します。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KRTConfiguration * _Nonnull defaultConfiguration;)
+ (KRTConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
/// アプリケーションキーの取得・設定を行います。
/// 設定ファイルから自動でロードされるアプリケーションキー以外を利用したい場合にのみ設定します。
@property (nonatomic, copy) NSString * _Nonnull appKey;
/// ベースURLの取得・設定を行います。
/// <em>SDK内部で利用するプロパティであり、通常のSDK利用でこちらのプロパティを利用することはありません。</em>
@property (nonatomic, copy) NSURL * _Nonnull baseURL;
/// overlayベースURLの取得・設定を行います。
/// <em>SDK内部で利用するプロパティであり、通常のSDK利用でこちらのプロパティを利用することはありません。</em>
@property (nonatomic, copy) NSURL * _Nonnull overlayBaseURL;
/// ドライランの利用有無の取得・設定を行います。<br>
/// ドライランを有効にした場合、<code>Tracker.track(...)</code> 等のメソッドを呼び出してもイベントの送信が行われなくなります。
/// <code>true</code> の場合はドライランが有効となり、<code>false</code> の場合は無効となります。<br>
/// デフォルトは <code>false</code> です。
@property (nonatomic) BOOL isDryRun;
/// オプトアウトの利用有無の取得・設定を行います。
/// なお本設定を有効とした場合であっても、明示的に <code>KarteApp.optIn()</code> を呼び出した場合はオプトイン状態で動作します。<br>
/// 本設定はあくまでも、オプトインまたはオプトアウトの表明を行っていない状態での動作設定を決めるものになります。
/// <code>true</code> の場合はデフォルトでオプトアウトが有効となり、<code>false</code> の場合は無効となります。<br>
/// デフォルトは <code>false</code> です。
@property (nonatomic) BOOL isOptOut;
/// ライブラリの設定の取得・設定を行います。
@property (nonatomic, copy) NSArray<id <LibraryConfiguration>> * _Nonnull libraryConfigurations;
/// IDFA取得用の委譲先インスタンスの取得・設定を行います。<br>
/// インスタンスが未設定の場合は、IDFAの情報はイベントに付与されません。
@property (nonatomic, weak) id <KRTIDFADelegate> _Nullable idfaDelegate;
/// SDK設定インスタンスを初期化します。
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// SDK設定インスタンスを初期化します。
/// \param appKey アプリケーションキー
///
- (nonnull instancetype)initWithAppKey:(NSString * _Nonnull)appKey OBJC_DESIGNATED_INITIALIZER;
/// SDK設定インスタンスを初期化します。
/// \param configurator 初期化ブロック
///
- (nonnull instancetype)initWithConfigurator:(SWIFT_NOESCAPE void (^ _Nonnull)(KRTConfiguration * _Nonnull))configurator;
/// SDK設定インスタンスを plist ファイルからロードします。
/// 指定したパスに有効な plist ファイルが存在しない場合は nil を返します。
/// \param plistPath plistのファイルパス
///
+ (KRTConfiguration * _Nullable)fromPlistPath:(NSString * _Nonnull)plistPath SWIFT_WARN_UNUSED_RESULT;
/// SDK設定インスタンスを初期化します。
/// \param configurator 初期化ブロック
///
+ (KRTConfiguration * _Nonnull)configWithConfigurator:(SWIFT_NOESCAPE void (^ _Nonnull)(KRTConfiguration * _Nonnull))configurator SWIFT_WARN_UNUSED_RESULT;
/// インスタンスをコピーします。
/// \param zone NSZone
///
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



/// deep link イベントを処理するためのクラスです。
/// <em>SDK内部で利用するクラスであり、通常のSDK利用でこちらのクラスを利用することはありません。</em>
SWIFT_CLASS_NAMED("DeepLinkEvent")
@interface KRTDeepLinkEvent : NSObject
/// ローダークラスが Objective-Cランライムに追加されたタイミングで呼び出されるメソッドです。
/// 本メソッドが呼び出されたタイミングで、<code>KarteApp</code> クラスに本クラスをライブラリとして登録します。
+ (void)_krt_load;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



enum KRTOperationMode : NSInteger;

/// SDKの実験的な設定を保持するクラスです。
SWIFT_CLASS_NAMED("ExperimentalConfiguration")
@interface KRTExperimentalConfiguration : KRTConfiguration
/// プロジェクト直下の  Karte-Info.plist をロードしてデフォルト値で初期化された設定インスタンスを返します。
/// Karte-Info.plist が存在しない場合は nil が返ります。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) KRTExperimentalConfiguration * _Nullable default_;)
+ (KRTExperimentalConfiguration * _Nullable)default SWIFT_WARN_UNUSED_RESULT;
/// デフォルト値で初期化された設定インスタンスを返します。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KRTExperimentalConfiguration * _Nonnull defaultConfiguration;)
+ (KRTExperimentalConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
/// 動作モードの取得・設定を行います。<br>
/// <em>実験的なオプションであるため、通常のSDK利用においてこちらのプロパティを変更する必要はありません。</em>
@property (nonatomic) enum KRTOperationMode operationMode;
/// SDK設定インスタンスを初期化します。
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// SDK設定インスタンスを初期化します。
/// \param appKey アプリケーションキー
///
- (nonnull instancetype)initWithAppKey:(NSString * _Nonnull)appKey OBJC_DESIGNATED_INITIALIZER;
/// SDK設定インスタンスを初期化します。
/// \param configurator 初期化ブロック
///
- (nonnull instancetype)initWithConfigurator:(SWIFT_NOESCAPE void (^ _Nonnull)(KRTExperimentalConfiguration * _Nonnull))configurator;
+ (KRTExperimentalConfiguration * _Nullable)fromPlistPath:(NSString * _Nonnull)plistPath SWIFT_WARN_UNUSED_RESULT;
/// SDK設定インスタンスを初期化します。
/// \param configurator 初期化ブロック
///
+ (KRTExperimentalConfiguration * _Nonnull)configWithConfigurator:(SWIFT_NOESCAPE void (^ _Nonnull)(KRTExperimentalConfiguration * _Nonnull))configurator SWIFT_WARN_UNUSED_RESULT;
/// インスタンスをコピーします。
/// \param zone NSZone
///
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// find_myself スキームを処理するためのクラスです。
/// <em>SDK内部で利用するクラスであり、通常のSDK利用でこちらのクラスを利用することはありません。</em>
SWIFT_CLASS_NAMED("FindMyself")
@interface KRTFindMyself : NSObject
/// ローダークラスが Objective-Cランライムに追加されたタイミングで呼び出されるメソッドです。
/// 本メソッドが呼び出されたタイミングで、<code>KarteApp</code> クラスに本クラスをライブラリとして登録します。
+ (void)_krt_load;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// IDFAの取得処理を委譲するためのタイプです。
SWIFT_PROTOCOL_NAMED("IDFADelegate")
@protocol KRTIDFADelegate
/// IDFAを返します。
@property (nonatomic, readonly, copy) NSString * _Nullable advertisingIdentifierString;
/// IDFAの取得可否を返します。
/// 取得を許容する場合は <code>true</code> を返し、許容しない場合は <code>false</code> を返します。
@property (nonatomic, readonly) BOOL isAdvertisingTrackingEnabled;
@end


/// KARTE SDKのエントリポイントであると共に、SDKの構成および依存ライブラリ等の管理を行うクラスです。
/// SDKを利用するには、<code>KarteApp.setup(appKey:)</code> を呼び出し初期化を行う必要があります。<br>
/// 初期化が行われていない状態では、イベントのトラッキングを始め、SDKの機能が利用できません。<br>
/// なおアプリ内メッセージ等のサブモジュールについても同様です。
/// SDKの設定については、初期化時に一部変更することが可能です。
/// 設定を変更して初期化を行う場合は、<code>KarteApp.setup(appKey:configuration:)</code>を呼び出してください。
SWIFT_CLASS_NAMED("KarteApp")
@interface KRTApp : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




enum KRTLogLevel : NSInteger;
@class UIApplication;

@interface KRTApp (SWIFT_EXTENSION(KarteCore))
/// <code>KarteApp.setup(appKey:configuration:)</code> 呼び出し時に指定したアプリケーションキーを返します。
/// 初期化が行われていない場合は空文字列を返します。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull appKey;)
+ (NSString * _Nonnull)appKey SWIFT_WARN_UNUSED_RESULT;
/// ユーザーを識別するためのID（ビジターID）を返します。
/// 初期化が行われていない場合は空文字列を返します。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull visitorId;)
+ (NSString * _Nonnull)visitorId SWIFT_WARN_UNUSED_RESULT;
/// <code>KarteApp.setup(appKey:configuration:)</code> 呼び出し時に指定した設定情報を返します。
/// 初期化が行われていない場合はデフォルトの設定情報を返します。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KRTConfiguration * _Nonnull configuration;)
+ (KRTConfiguration * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
/// オプトアウトの設定有無を返します。
/// オプトアウトされている場合は <code>true</code> を返し、されていない場合は <code>false</code> を返します。<br>
/// また初期化が行われていない場合は <code>false</code> を返します。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isOptOut;)
+ (BOOL)isOptOut SWIFT_WARN_UNUSED_RESULT;
/// SDKの初期化を行います。
/// 初期化オプションが未指定の場合は、デフォルト設定で初期化が行われます。<br>
/// 初期化オプションのデフォルト値については <code>Configuration</code> クラスを参照してください。
/// なお初期化後に初期化オプションを変更した場合、その変更はSDKには反映されません。
/// また既に初期化されている状態で呼び出した場合は何もしません。
/// \param appKey アプリケーションキー
///
/// \param configuration 設定
///
+ (void)setupWithAppKey:(NSString * _Nonnull)appKey configuration:(KRTConfiguration * _Nonnull)configuration;
/// SDKの初期化を行います。
/// 初期化オプションが未指定の場合は、プロジェクト直下の  Karte-Info.plist をロードして初期化が行われます。<br>
/// 初期化オプションのデフォルト値については <code>Configuration.default</code> を参照してください。
/// なお初期化後に初期化オプションを変更した場合、その変更はSDKには反映されません。
/// また既に初期化されている状態で呼び出した場合は何もしません。
/// \param configuration 設定
///
+ (void)setupWithConfiguration:(KRTConfiguration * _Nullable)configuration;
/// ログレベルを設定します。
/// なおデフォルトのログレベルは <code>LogLevel.error</code> です。
/// \param level ログレベル
///
+ (void)setLogLevel:(enum KRTLogLevel)level;
/// ログ出力有無を設定します。
/// ログを出力する場合は <code>true</code> を指定し、出力しない場合は <code>false</code> を指定します。<br>
/// デフォルトは <code>true</code> です。
/// \param isEnabled ログ出力有無
///
+ (void)setLogEnabled:(BOOL)isEnabled;
/// オプトインします。
/// なお初期化が行われていない状態で呼び出した場合はオプトインは行われません。
+ (void)optIn;
/// オプトアウトします。
/// なお初期化が行われていない状態で呼び出した場合はオプトアウトは行われません。
+ (void)optOut;
/// 一時的（アプリの次回起動時まで）にオプトアウトします。
/// なお初期化が行われていない状態で呼び出した場合はオプトアウトは行われません。
+ (void)optOutTemporarily;
/// ビジターIDを再生成します。
/// ビジターIDの再生成は、現在のユーザーとは異なるユーザーとして計測したい場合などに行います。<br>
/// 例えば、アプリケーションでログアウトした際などがこれに該当します。
/// なお初期化が行われていない状態で呼び出した場合は再生成は行われません。
+ (void)renewVisitorId;
/// KARTE SDKの機能に関連するカスタムURLスキームを処理します。
/// なお初期化が行われていない状態で呼び出した場合はカスタムURLスキームの処理は行われません。
/// \param app <code>UIApplication</code> クラスインスタンス
///
/// \param url カスタムURLスキーム
///
///
/// returns:
/// カスタムURLスキームの処理結果を返します。SDKで処理が可能な場合は <code>true</code> を返し、処理できない場合は<code>false</code> を返します。
+ (BOOL)application:(UIApplication * _Nonnull)app openURL:(NSURL * _Nonnull)url;
@end


/// ライブラリの設定を表すタイプです。
/// <em>サブモジュールと連携するために用意している機能であり、通常利用で使用することはありません。</em>
SWIFT_PROTOCOL("_TtP9KarteCore20LibraryConfiguration_")
@protocol LibraryConfiguration
@end

/// ログレベルを表す列挙型です。
typedef SWIFT_ENUM_NAMED(NSInteger, KRTLogLevel, "LogLevel", closed) {
/// Error
  KRTLogLevelError = 0,
/// Warning
  KRTLogLevelWarn = 1,
/// Information
  KRTLogLevelInfo = 2,
/// Debug
  KRTLogLevelDebug = 3,
/// Verbose
  KRTLogLevelVerbose = 4,
};


/// 動作モードを表す列挙型です。
typedef SWIFT_ENUM_NAMED(NSInteger, KRTOperationMode, "OperationMode", closed) {
/// イベント解析あり
  KRTOperationModeDefault = 0,
/// イベント解析なし
  KRTOperationModeIngest = 1,
};


/// イベントトラッキングを行うためのクラスです。
/// 送信するイベントの種類に応じて、複数のメソッドが用意されております。
/// <h3>track</h3>
/// 任意の名前のイベントを送る場合に利用します。
/// <h3>identify</h3>
/// ユーザーに関する情報（ユーザーIDや名前、メールアドレス等）を送る場合に利用します。
/// <h3>view</h3>
/// 画面表示に関する情報を送る場合に利用します。<br>
/// 通常は <code>viewDidAppear:</code> 等で呼び出します。
/// なおViewイベントに関しては、イベントの送信だけではなくアプリ上で画面遷移が発生したことを認識するためのものとしても利用されます。<br>
/// 具体的には、Viewイベントを発火させたタイミングで、既にアプリ内メッセージが表示されている場合は、自動でアプリ内メッセージを非表示にします。<br>
/// また <a href="https://support.karte.io/post/3JaA3BlXQea59AaPGxD3bb">ネイティブアプリにおける接客表示制限</a> オプションを有効にした場合にも、ここで設定した認識結果が利用されます。
/// <h3>iPad OS における Split View / Slide Over 対応について</h3>
/// iPad OS の Split View / Slide Over に対応するために、イニシャライザに <code>UIView</code> を引数として取るものがあります。<br>
/// Split View / Slide Over を有効がアプリケーションでは、<code>UIView</code> を引数として取るイニシャライザを利用することで適切なシーンにアプリ内メッセージを表示することが可能です。
SWIFT_CLASS("_TtC9KarteCore7Tracker")
@interface Tracker : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class UIView;
@class KRTTrackingTask;

/// イベントトラッキングを行うためのクラスです。
/// 送信するイベントの種類に応じて、複数のメソッドが用意されております。
/// <h3>track</h3>
/// 任意の名前のイベントを送る場合に利用します。
/// <h3>identify</h3>
/// ユーザーに関する情報（ユーザーIDや名前、メールアドレス等）を送る場合に利用します。
/// <h3>view</h3>
/// 画面表示に関する情報を送る場合に利用します。<br>
/// 通常は <code>viewDidAppear:</code> 等で呼び出します。
/// なおViewイベントに関しては、イベントの送信だけではなくアプリ上で画面遷移が発生したことを認識するためのものとしても利用されます。<br>
/// 具体的には、Viewイベントを発火させたタイミングで、既にアプリ内メッセージが表示されている場合は、自動でアプリ内メッセージを非表示にします。<br>
/// また <a href="https://support.karte.io/post/3JaA3BlXQea59AaPGxD3bb">ネイティブアプリにおける接客表示制限</a> オプションを有効にした場合にも、ここで設定した認識結果が利用されます。
/// <h3>iPad OS における Split View / Slide Over 対応について</h3>
/// iPad OS の Split View / Slide Over に対応するために、イニシャライザに <code>UIView</code> を引数として取るものがあります。<br>
/// Split View / Slide Over を有効がアプリケーションでは、<code>UIView</code> を引数として取るイニシャライザを利用することで適切なシーンにアプリ内メッセージを表示することが可能です。
SWIFT_CLASS_NAMED("TrackerObjectiveC")
@interface KRTTracker : NSObject
/// トラッカーインスタンスを初期化します。
/// \param view イベントの発火に関連する <code>UIView</code>。イベント発火に関連するシーンの特定に利用されます。
///
- (nonnull instancetype)initWithView:(UIView * _Nullable)view OBJC_DESIGNATED_INITIALIZER;
/// イベントの送信を行います。
/// \param name イベント名
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
+ (KRTTrackingTask * _Nonnull)track:(NSString * _Nonnull)name;
/// イベントの送信を行います。
/// \param name イベント名
///
/// \param values イベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
+ (KRTTrackingTask * _Nonnull)track:(NSString * _Nonnull)name values:(NSDictionary<NSString *, id> * _Nonnull)values;
/// Identifyイベントの送信を行います。
/// \param values Identifyイベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
+ (KRTTrackingTask * _Nonnull)identify:(NSDictionary<NSString *, id> * _Nonnull)values SWIFT_DEPRECATED_MSG("userId is a required parameter");
/// Identifyイベントの送信を行います。
/// \param userId ユーザーを識別する一意なID
///
/// \param values Identifyイベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
+ (KRTTrackingTask * _Nonnull)identify:(NSString * _Nonnull)userId :(NSDictionary<NSString *, id> * _Nonnull)values;
/// Attributeイベントの送信を行います。
/// \param values Attributeイベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
+ (KRTTrackingTask * _Nonnull)attribute:(NSDictionary<NSString *, id> * _Nonnull)values;
/// Viewイベントの送信を行います。
/// \param viewName 画面名
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
+ (KRTTrackingTask * _Nonnull)view:(NSString * _Nonnull)viewName;
/// Viewイベントの送信を行います。
/// \param viewName 画面名
///
/// \param title タイトル
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
+ (KRTTrackingTask * _Nonnull)view:(NSString * _Nonnull)viewName title:(NSString * _Nullable)title;
/// Viewイベントの送信を行います。
/// \param viewName 画面名
///
/// \param title タイトル
///
/// \param values Viewイベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
+ (KRTTrackingTask * _Nonnull)view:(NSString * _Nonnull)viewName title:(NSString * _Nullable)title values:(NSDictionary<NSString *, id> * _Nonnull)values;
/// イベントの送信を行います。
/// \param name イベント名
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
- (KRTTrackingTask * _Nonnull)track:(NSString * _Nonnull)name;
/// イベントの送信を行います。
/// \param name イベント名
///
/// \param values イベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
- (KRTTrackingTask * _Nonnull)track:(NSString * _Nonnull)name values:(NSDictionary<NSString *, id> * _Nonnull)values;
/// Identifyイベントの送信を行います。
/// \param values Identifyイベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
- (KRTTrackingTask * _Nonnull)identify:(NSDictionary<NSString *, id> * _Nonnull)values SWIFT_DEPRECATED_MSG("userId is a required parameter");
/// Identifyイベントの送信を行います。
/// \param userId ユーザーを識別する一意なID
///
/// \param values Identifyイベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
- (KRTTrackingTask * _Nonnull)identify:(NSString * _Nonnull)userId :(NSDictionary<NSString *, id> * _Nonnull)values;
/// Attributeイベントの送信を行います。
/// \param values Attributeイベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
- (KRTTrackingTask * _Nonnull)attribute:(NSDictionary<NSString *, id> * _Nonnull)values;
/// Viewイベントの送信を行います。
/// \param viewName 画面名
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
- (KRTTrackingTask * _Nonnull)view:(NSString * _Nonnull)viewName;
/// Viewイベントの送信を行います。
/// \param viewName 画面名
///
/// \param title タイトル
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
- (KRTTrackingTask * _Nonnull)view:(NSString * _Nonnull)viewName title:(NSString * _Nullable)title;
/// Viewイベントの送信を行います。
/// \param viewName 画面名
///
/// \param title タイトル
///
/// \param values Viewイベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
- (KRTTrackingTask * _Nonnull)view:(NSString * _Nonnull)viewName title:(NSString * _Nullable)title values:(NSDictionary<NSString *, id> * _Nonnull)values;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("TrackingTask")
@interface KRTTrackingTask : NSObject
@property (nonatomic, copy) void (^ _Nullable completion)(BOOL);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKWebView;

/// WebView 連携するためのクラスです。
/// Webページを開くWebViewに連携用のスクリプトを設定することで、WebとAppのユーザーの紐付けが行われます。<br>
/// なお連携を行うためにはWebページに、KARTEのタグが埋め込まれている必要があります。
SWIFT_CLASS_NAMED("UserSync")
@interface KRTUserSync : NSObject
/// 指定されたURL文字列にWebView連携用のクエリパラメータを付与します。
/// \param urlString 連携するページのURL文字列
///
///
/// returns:
/// 連携用のクエリパラメータを付与したURL文字列を返します。指定されたURL文字列の形式が正しくない場合、またはSDKの初期化が行われていない場合は、引数に指定したURL文字列を返します。
+ (NSString * _Nonnull)appendingQueryParameterWithURLString:(NSString * _Nonnull)urlString SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("User sync function using query parameters is deprecated. It will be removed in the future. Use setUserSyncSript.");
/// 指定されたURLにWebView連携用のクエリパラメータを付与します。
/// \param url 連携するページのURL
///
///
/// returns:
/// 連携用のクエリパラメータを付与したURLを返します。SDKの初期化が行われていない場合は、引数に指定したURLを返します。
+ (NSURL * _Nonnull)appendingQueryParameterWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("User sync function using query parameters is deprecated. It will be removed in the future. Use setUserSyncSript.");
/// WKWebViewに連携用のスクリプトを設定します。<br>
/// スクリプトはユーザースクリプトとして設定されます。
/// なおSDKの初期化が行われていない場合は設定されません。
/// \param webView <code>WKWebView</code>
///
+ (void)setUserSyncScriptWithWebView:(WKWebView * _Nonnull)webView;
/// WebViewに連携するためのスクリプトを生成します。<br>
/// スクリプトをユーザースクリプトとしてWebViewに設定することで連携できます。
/// なおSDKの初期化が行われていない場合はnilが返却されます。
///
/// returns:
/// 生成したスクリプト文字列を返します。SDKの初期化が行われていない場合は nil を返します。
+ (NSString * _Nullable)getUserSyncScript SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef KARTECORE_SWIFT_H
#define KARTECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KarteCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// コマンドスキームを処理するためのクラスです。
/// <em>SDK内部で利用するクラスであり、通常のSDK利用でこちらのクラスを利用することはありません。</em>
SWIFT_CLASS_NAMED("CommandHandler")
@interface KRTCommandHandler : NSObject
/// ローダークラスが Objective-Cランライムに追加されたタイミングで呼び出されるメソッドです。
/// 本メソッドが呼び出されたタイミングで、<code>KarteApp</code> クラスに本クラスをライブラリとして登録します。
+ (void)_krt_load;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class NSString;
@class NSURL;
@protocol LibraryConfiguration;
@protocol KRTIDFADelegate;

/// SDKの設定を保持するクラスです。
SWIFT_CLASS_NAMED("Configuration")
@interface KRTConfiguration : NSObject <NSCopying>
/// プロジェクト直下の  Karte-Info.plist をロードしてデフォルト値で初期化された設定インスタンスを返します。
/// Karte-Info.plist が存在しない場合は nil が返ります。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) KRTConfiguration * _Nullable default_;)
+ (KRTConfiguration * _Nullable)default SWIFT_WARN_UNUSED_RESULT;
/// デフォルト値で初期化された設定インスタンスを返します。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KRTConfiguration * _Nonnull defaultConfiguration;)
+ (KRTConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
/// アプリケーションキーの取得・設定を行います。
/// 設定ファイルから自動でロードされるアプリケーションキー以外を利用したい場合にのみ設定します。
@property (nonatomic, copy) NSString * _Nonnull appKey;
/// ベースURLの取得・設定を行います。
/// <em>SDK内部で利用するプロパティであり、通常のSDK利用でこちらのプロパティを利用することはありません。</em>
@property (nonatomic, copy) NSURL * _Nonnull baseURL;
/// overlayベースURLの取得・設定を行います。
/// <em>SDK内部で利用するプロパティであり、通常のSDK利用でこちらのプロパティを利用することはありません。</em>
@property (nonatomic, copy) NSURL * _Nonnull overlayBaseURL;
/// ドライランの利用有無の取得・設定を行います。<br>
/// ドライランを有効にした場合、<code>Tracker.track(...)</code> 等のメソッドを呼び出してもイベントの送信が行われなくなります。
/// <code>true</code> の場合はドライランが有効となり、<code>false</code> の場合は無効となります。<br>
/// デフォルトは <code>false</code> です。
@property (nonatomic) BOOL isDryRun;
/// オプトアウトの利用有無の取得・設定を行います。
/// なお本設定を有効とした場合であっても、明示的に <code>KarteApp.optIn()</code> を呼び出した場合はオプトイン状態で動作します。<br>
/// 本設定はあくまでも、オプトインまたはオプトアウトの表明を行っていない状態での動作設定を決めるものになります。
/// <code>true</code> の場合はデフォルトでオプトアウトが有効となり、<code>false</code> の場合は無効となります。<br>
/// デフォルトは <code>false</code> です。
@property (nonatomic) BOOL isOptOut;
/// ライブラリの設定の取得・設定を行います。
@property (nonatomic, copy) NSArray<id <LibraryConfiguration>> * _Nonnull libraryConfigurations;
/// IDFA取得用の委譲先インスタンスの取得・設定を行います。<br>
/// インスタンスが未設定の場合は、IDFAの情報はイベントに付与されません。
@property (nonatomic, weak) id <KRTIDFADelegate> _Nullable idfaDelegate;
/// SDK設定インスタンスを初期化します。
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// SDK設定インスタンスを初期化します。
/// \param appKey アプリケーションキー
///
- (nonnull instancetype)initWithAppKey:(NSString * _Nonnull)appKey OBJC_DESIGNATED_INITIALIZER;
/// SDK設定インスタンスを初期化します。
/// \param configurator 初期化ブロック
///
- (nonnull instancetype)initWithConfigurator:(SWIFT_NOESCAPE void (^ _Nonnull)(KRTConfiguration * _Nonnull))configurator;
/// SDK設定インスタンスを plist ファイルからロードします。
/// 指定したパスに有効な plist ファイルが存在しない場合は nil を返します。
/// \param plistPath plistのファイルパス
///
+ (KRTConfiguration * _Nullable)fromPlistPath:(NSString * _Nonnull)plistPath SWIFT_WARN_UNUSED_RESULT;
/// SDK設定インスタンスを初期化します。
/// \param configurator 初期化ブロック
///
+ (KRTConfiguration * _Nonnull)configWithConfigurator:(SWIFT_NOESCAPE void (^ _Nonnull)(KRTConfiguration * _Nonnull))configurator SWIFT_WARN_UNUSED_RESULT;
/// インスタンスをコピーします。
/// \param zone NSZone
///
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



/// deep link イベントを処理するためのクラスです。
/// <em>SDK内部で利用するクラスであり、通常のSDK利用でこちらのクラスを利用することはありません。</em>
SWIFT_CLASS_NAMED("DeepLinkEvent")
@interface KRTDeepLinkEvent : NSObject
/// ローダークラスが Objective-Cランライムに追加されたタイミングで呼び出されるメソッドです。
/// 本メソッドが呼び出されたタイミングで、<code>KarteApp</code> クラスに本クラスをライブラリとして登録します。
+ (void)_krt_load;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



enum KRTOperationMode : NSInteger;

/// SDKの実験的な設定を保持するクラスです。
SWIFT_CLASS_NAMED("ExperimentalConfiguration")
@interface KRTExperimentalConfiguration : KRTConfiguration
/// プロジェクト直下の  Karte-Info.plist をロードしてデフォルト値で初期化された設定インスタンスを返します。
/// Karte-Info.plist が存在しない場合は nil が返ります。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) KRTExperimentalConfiguration * _Nullable default_;)
+ (KRTExperimentalConfiguration * _Nullable)default SWIFT_WARN_UNUSED_RESULT;
/// デフォルト値で初期化された設定インスタンスを返します。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KRTExperimentalConfiguration * _Nonnull defaultConfiguration;)
+ (KRTExperimentalConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
/// 動作モードの取得・設定を行います。<br>
/// <em>実験的なオプションであるため、通常のSDK利用においてこちらのプロパティを変更する必要はありません。</em>
@property (nonatomic) enum KRTOperationMode operationMode;
/// SDK設定インスタンスを初期化します。
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// SDK設定インスタンスを初期化します。
/// \param appKey アプリケーションキー
///
- (nonnull instancetype)initWithAppKey:(NSString * _Nonnull)appKey OBJC_DESIGNATED_INITIALIZER;
/// SDK設定インスタンスを初期化します。
/// \param configurator 初期化ブロック
///
- (nonnull instancetype)initWithConfigurator:(SWIFT_NOESCAPE void (^ _Nonnull)(KRTExperimentalConfiguration * _Nonnull))configurator;
+ (KRTExperimentalConfiguration * _Nullable)fromPlistPath:(NSString * _Nonnull)plistPath SWIFT_WARN_UNUSED_RESULT;
/// SDK設定インスタンスを初期化します。
/// \param configurator 初期化ブロック
///
+ (KRTExperimentalConfiguration * _Nonnull)configWithConfigurator:(SWIFT_NOESCAPE void (^ _Nonnull)(KRTExperimentalConfiguration * _Nonnull))configurator SWIFT_WARN_UNUSED_RESULT;
/// インスタンスをコピーします。
/// \param zone NSZone
///
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// find_myself スキームを処理するためのクラスです。
/// <em>SDK内部で利用するクラスであり、通常のSDK利用でこちらのクラスを利用することはありません。</em>
SWIFT_CLASS_NAMED("FindMyself")
@interface KRTFindMyself : NSObject
/// ローダークラスが Objective-Cランライムに追加されたタイミングで呼び出されるメソッドです。
/// 本メソッドが呼び出されたタイミングで、<code>KarteApp</code> クラスに本クラスをライブラリとして登録します。
+ (void)_krt_load;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// IDFAの取得処理を委譲するためのタイプです。
SWIFT_PROTOCOL_NAMED("IDFADelegate")
@protocol KRTIDFADelegate
/// IDFAを返します。
@property (nonatomic, readonly, copy) NSString * _Nullable advertisingIdentifierString;
/// IDFAの取得可否を返します。
/// 取得を許容する場合は <code>true</code> を返し、許容しない場合は <code>false</code> を返します。
@property (nonatomic, readonly) BOOL isAdvertisingTrackingEnabled;
@end


/// KARTE SDKのエントリポイントであると共に、SDKの構成および依存ライブラリ等の管理を行うクラスです。
/// SDKを利用するには、<code>KarteApp.setup(appKey:)</code> を呼び出し初期化を行う必要があります。<br>
/// 初期化が行われていない状態では、イベントのトラッキングを始め、SDKの機能が利用できません。<br>
/// なおアプリ内メッセージ等のサブモジュールについても同様です。
/// SDKの設定については、初期化時に一部変更することが可能です。
/// 設定を変更して初期化を行う場合は、<code>KarteApp.setup(appKey:configuration:)</code>を呼び出してください。
SWIFT_CLASS_NAMED("KarteApp")
@interface KRTApp : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




enum KRTLogLevel : NSInteger;
@class UIApplication;

@interface KRTApp (SWIFT_EXTENSION(KarteCore))
/// <code>KarteApp.setup(appKey:configuration:)</code> 呼び出し時に指定したアプリケーションキーを返します。
/// 初期化が行われていない場合は空文字列を返します。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull appKey;)
+ (NSString * _Nonnull)appKey SWIFT_WARN_UNUSED_RESULT;
/// ユーザーを識別するためのID（ビジターID）を返します。
/// 初期化が行われていない場合は空文字列を返します。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull visitorId;)
+ (NSString * _Nonnull)visitorId SWIFT_WARN_UNUSED_RESULT;
/// <code>KarteApp.setup(appKey:configuration:)</code> 呼び出し時に指定した設定情報を返します。
/// 初期化が行われていない場合はデフォルトの設定情報を返します。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KRTConfiguration * _Nonnull configuration;)
+ (KRTConfiguration * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
/// オプトアウトの設定有無を返します。
/// オプトアウトされている場合は <code>true</code> を返し、されていない場合は <code>false</code> を返します。<br>
/// また初期化が行われていない場合は <code>false</code> を返します。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isOptOut;)
+ (BOOL)isOptOut SWIFT_WARN_UNUSED_RESULT;
/// SDKの初期化を行います。
/// 初期化オプションが未指定の場合は、デフォルト設定で初期化が行われます。<br>
/// 初期化オプションのデフォルト値については <code>Configuration</code> クラスを参照してください。
/// なお初期化後に初期化オプションを変更した場合、その変更はSDKには反映されません。
/// また既に初期化されている状態で呼び出した場合は何もしません。
/// \param appKey アプリケーションキー
///
/// \param configuration 設定
///
+ (void)setupWithAppKey:(NSString * _Nonnull)appKey configuration:(KRTConfiguration * _Nonnull)configuration;
/// SDKの初期化を行います。
/// 初期化オプションが未指定の場合は、プロジェクト直下の  Karte-Info.plist をロードして初期化が行われます。<br>
/// 初期化オプションのデフォルト値については <code>Configuration.default</code> を参照してください。
/// なお初期化後に初期化オプションを変更した場合、その変更はSDKには反映されません。
/// また既に初期化されている状態で呼び出した場合は何もしません。
/// \param configuration 設定
///
+ (void)setupWithConfiguration:(KRTConfiguration * _Nullable)configuration;
/// ログレベルを設定します。
/// なおデフォルトのログレベルは <code>LogLevel.error</code> です。
/// \param level ログレベル
///
+ (void)setLogLevel:(enum KRTLogLevel)level;
/// ログ出力有無を設定します。
/// ログを出力する場合は <code>true</code> を指定し、出力しない場合は <code>false</code> を指定します。<br>
/// デフォルトは <code>true</code> です。
/// \param isEnabled ログ出力有無
///
+ (void)setLogEnabled:(BOOL)isEnabled;
/// オプトインします。
/// なお初期化が行われていない状態で呼び出した場合はオプトインは行われません。
+ (void)optIn;
/// オプトアウトします。
/// なお初期化が行われていない状態で呼び出した場合はオプトアウトは行われません。
+ (void)optOut;
/// 一時的（アプリの次回起動時まで）にオプトアウトします。
/// なお初期化が行われていない状態で呼び出した場合はオプトアウトは行われません。
+ (void)optOutTemporarily;
/// ビジターIDを再生成します。
/// ビジターIDの再生成は、現在のユーザーとは異なるユーザーとして計測したい場合などに行います。<br>
/// 例えば、アプリケーションでログアウトした際などがこれに該当します。
/// なお初期化が行われていない状態で呼び出した場合は再生成は行われません。
+ (void)renewVisitorId;
/// KARTE SDKの機能に関連するカスタムURLスキームを処理します。
/// なお初期化が行われていない状態で呼び出した場合はカスタムURLスキームの処理は行われません。
/// \param app <code>UIApplication</code> クラスインスタンス
///
/// \param url カスタムURLスキーム
///
///
/// returns:
/// カスタムURLスキームの処理結果を返します。SDKで処理が可能な場合は <code>true</code> を返し、処理できない場合は<code>false</code> を返します。
+ (BOOL)application:(UIApplication * _Nonnull)app openURL:(NSURL * _Nonnull)url;
@end


/// ライブラリの設定を表すタイプです。
/// <em>サブモジュールと連携するために用意している機能であり、通常利用で使用することはありません。</em>
SWIFT_PROTOCOL("_TtP9KarteCore20LibraryConfiguration_")
@protocol LibraryConfiguration
@end

/// ログレベルを表す列挙型です。
typedef SWIFT_ENUM_NAMED(NSInteger, KRTLogLevel, "LogLevel", closed) {
/// Error
  KRTLogLevelError = 0,
/// Warning
  KRTLogLevelWarn = 1,
/// Information
  KRTLogLevelInfo = 2,
/// Debug
  KRTLogLevelDebug = 3,
/// Verbose
  KRTLogLevelVerbose = 4,
};


/// 動作モードを表す列挙型です。
typedef SWIFT_ENUM_NAMED(NSInteger, KRTOperationMode, "OperationMode", closed) {
/// イベント解析あり
  KRTOperationModeDefault = 0,
/// イベント解析なし
  KRTOperationModeIngest = 1,
};


/// イベントトラッキングを行うためのクラスです。
/// 送信するイベントの種類に応じて、複数のメソッドが用意されております。
/// <h3>track</h3>
/// 任意の名前のイベントを送る場合に利用します。
/// <h3>identify</h3>
/// ユーザーに関する情報（ユーザーIDや名前、メールアドレス等）を送る場合に利用します。
/// <h3>view</h3>
/// 画面表示に関する情報を送る場合に利用します。<br>
/// 通常は <code>viewDidAppear:</code> 等で呼び出します。
/// なおViewイベントに関しては、イベントの送信だけではなくアプリ上で画面遷移が発生したことを認識するためのものとしても利用されます。<br>
/// 具体的には、Viewイベントを発火させたタイミングで、既にアプリ内メッセージが表示されている場合は、自動でアプリ内メッセージを非表示にします。<br>
/// また <a href="https://support.karte.io/post/3JaA3BlXQea59AaPGxD3bb">ネイティブアプリにおける接客表示制限</a> オプションを有効にした場合にも、ここで設定した認識結果が利用されます。
/// <h3>iPad OS における Split View / Slide Over 対応について</h3>
/// iPad OS の Split View / Slide Over に対応するために、イニシャライザに <code>UIView</code> を引数として取るものがあります。<br>
/// Split View / Slide Over を有効がアプリケーションでは、<code>UIView</code> を引数として取るイニシャライザを利用することで適切なシーンにアプリ内メッセージを表示することが可能です。
SWIFT_CLASS("_TtC9KarteCore7Tracker")
@interface Tracker : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class UIView;
@class KRTTrackingTask;

/// イベントトラッキングを行うためのクラスです。
/// 送信するイベントの種類に応じて、複数のメソッドが用意されております。
/// <h3>track</h3>
/// 任意の名前のイベントを送る場合に利用します。
/// <h3>identify</h3>
/// ユーザーに関する情報（ユーザーIDや名前、メールアドレス等）を送る場合に利用します。
/// <h3>view</h3>
/// 画面表示に関する情報を送る場合に利用します。<br>
/// 通常は <code>viewDidAppear:</code> 等で呼び出します。
/// なおViewイベントに関しては、イベントの送信だけではなくアプリ上で画面遷移が発生したことを認識するためのものとしても利用されます。<br>
/// 具体的には、Viewイベントを発火させたタイミングで、既にアプリ内メッセージが表示されている場合は、自動でアプリ内メッセージを非表示にします。<br>
/// また <a href="https://support.karte.io/post/3JaA3BlXQea59AaPGxD3bb">ネイティブアプリにおける接客表示制限</a> オプションを有効にした場合にも、ここで設定した認識結果が利用されます。
/// <h3>iPad OS における Split View / Slide Over 対応について</h3>
/// iPad OS の Split View / Slide Over に対応するために、イニシャライザに <code>UIView</code> を引数として取るものがあります。<br>
/// Split View / Slide Over を有効がアプリケーションでは、<code>UIView</code> を引数として取るイニシャライザを利用することで適切なシーンにアプリ内メッセージを表示することが可能です。
SWIFT_CLASS_NAMED("TrackerObjectiveC")
@interface KRTTracker : NSObject
/// トラッカーインスタンスを初期化します。
/// \param view イベントの発火に関連する <code>UIView</code>。イベント発火に関連するシーンの特定に利用されます。
///
- (nonnull instancetype)initWithView:(UIView * _Nullable)view OBJC_DESIGNATED_INITIALIZER;
/// イベントの送信を行います。
/// \param name イベント名
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
+ (KRTTrackingTask * _Nonnull)track:(NSString * _Nonnull)name;
/// イベントの送信を行います。
/// \param name イベント名
///
/// \param values イベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
+ (KRTTrackingTask * _Nonnull)track:(NSString * _Nonnull)name values:(NSDictionary<NSString *, id> * _Nonnull)values;
/// Identifyイベントの送信を行います。
/// \param values Identifyイベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
+ (KRTTrackingTask * _Nonnull)identify:(NSDictionary<NSString *, id> * _Nonnull)values SWIFT_DEPRECATED_MSG("userId is a required parameter");
/// Identifyイベントの送信を行います。
/// \param userId ユーザーを識別する一意なID
///
/// \param values Identifyイベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
+ (KRTTrackingTask * _Nonnull)identify:(NSString * _Nonnull)userId :(NSDictionary<NSString *, id> * _Nonnull)values;
/// Attributeイベントの送信を行います。
/// \param values Attributeイベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
+ (KRTTrackingTask * _Nonnull)attribute:(NSDictionary<NSString *, id> * _Nonnull)values;
/// Viewイベントの送信を行います。
/// \param viewName 画面名
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
+ (KRTTrackingTask * _Nonnull)view:(NSString * _Nonnull)viewName;
/// Viewイベントの送信を行います。
/// \param viewName 画面名
///
/// \param title タイトル
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
+ (KRTTrackingTask * _Nonnull)view:(NSString * _Nonnull)viewName title:(NSString * _Nullable)title;
/// Viewイベントの送信を行います。
/// \param viewName 画面名
///
/// \param title タイトル
///
/// \param values Viewイベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
+ (KRTTrackingTask * _Nonnull)view:(NSString * _Nonnull)viewName title:(NSString * _Nullable)title values:(NSDictionary<NSString *, id> * _Nonnull)values;
/// イベントの送信を行います。
/// \param name イベント名
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
- (KRTTrackingTask * _Nonnull)track:(NSString * _Nonnull)name;
/// イベントの送信を行います。
/// \param name イベント名
///
/// \param values イベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
- (KRTTrackingTask * _Nonnull)track:(NSString * _Nonnull)name values:(NSDictionary<NSString *, id> * _Nonnull)values;
/// Identifyイベントの送信を行います。
/// \param values Identifyイベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
- (KRTTrackingTask * _Nonnull)identify:(NSDictionary<NSString *, id> * _Nonnull)values SWIFT_DEPRECATED_MSG("userId is a required parameter");
/// Identifyイベントの送信を行います。
/// \param userId ユーザーを識別する一意なID
///
/// \param values Identifyイベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
- (KRTTrackingTask * _Nonnull)identify:(NSString * _Nonnull)userId :(NSDictionary<NSString *, id> * _Nonnull)values;
/// Attributeイベントの送信を行います。
/// \param values Attributeイベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
- (KRTTrackingTask * _Nonnull)attribute:(NSDictionary<NSString *, id> * _Nonnull)values;
/// Viewイベントの送信を行います。
/// \param viewName 画面名
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
- (KRTTrackingTask * _Nonnull)view:(NSString * _Nonnull)viewName;
/// Viewイベントの送信を行います。
/// \param viewName 画面名
///
/// \param title タイトル
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
- (KRTTrackingTask * _Nonnull)view:(NSString * _Nonnull)viewName title:(NSString * _Nullable)title;
/// Viewイベントの送信を行います。
/// \param viewName 画面名
///
/// \param title タイトル
///
/// \param values Viewイベントに紐付けるカスタムオブジェクト
///
///
/// returns:
/// トラッキングタスクの状態を保持するオブジェクトを返します。
- (KRTTrackingTask * _Nonnull)view:(NSString * _Nonnull)viewName title:(NSString * _Nullable)title values:(NSDictionary<NSString *, id> * _Nonnull)values;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("TrackingTask")
@interface KRTTrackingTask : NSObject
@property (nonatomic, copy) void (^ _Nullable completion)(BOOL);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKWebView;

/// WebView 連携するためのクラスです。
/// Webページを開くWebViewに連携用のスクリプトを設定することで、WebとAppのユーザーの紐付けが行われます。<br>
/// なお連携を行うためにはWebページに、KARTEのタグが埋め込まれている必要があります。
SWIFT_CLASS_NAMED("UserSync")
@interface KRTUserSync : NSObject
/// 指定されたURL文字列にWebView連携用のクエリパラメータを付与します。
/// \param urlString 連携するページのURL文字列
///
///
/// returns:
/// 連携用のクエリパラメータを付与したURL文字列を返します。指定されたURL文字列の形式が正しくない場合、またはSDKの初期化が行われていない場合は、引数に指定したURL文字列を返します。
+ (NSString * _Nonnull)appendingQueryParameterWithURLString:(NSString * _Nonnull)urlString SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("User sync function using query parameters is deprecated. It will be removed in the future. Use setUserSyncSript.");
/// 指定されたURLにWebView連携用のクエリパラメータを付与します。
/// \param url 連携するページのURL
///
///
/// returns:
/// 連携用のクエリパラメータを付与したURLを返します。SDKの初期化が行われていない場合は、引数に指定したURLを返します。
+ (NSURL * _Nonnull)appendingQueryParameterWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("User sync function using query parameters is deprecated. It will be removed in the future. Use setUserSyncSript.");
/// WKWebViewに連携用のスクリプトを設定します。<br>
/// スクリプトはユーザースクリプトとして設定されます。
/// なおSDKの初期化が行われていない場合は設定されません。
/// \param webView <code>WKWebView</code>
///
+ (void)setUserSyncScriptWithWebView:(WKWebView * _Nonnull)webView;
/// WebViewに連携するためのスクリプトを生成します。<br>
/// スクリプトをユーザースクリプトとしてWebViewに設定することで連携できます。
/// なおSDKの初期化が行われていない場合はnilが返却されます。
///
/// returns:
/// 生成したスクリプト文字列を返します。SDKの初期化が行われていない場合は nil を返します。
+ (NSString * _Nullable)getUserSyncScript SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
