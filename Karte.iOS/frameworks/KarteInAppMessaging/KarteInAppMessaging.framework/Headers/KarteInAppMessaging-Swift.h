#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KarteInAppMessaging",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol KRTInAppMessagingDelegate;
@class WKProcessPool;
@class UIView;

/// アプリ内メッセージの管理を行うクラスです。
SWIFT_CLASS_NAMED("InAppMessaging")
@interface KRTInAppMessaging : NSObject
/// 共有インスタンスを返します。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KRTInAppMessaging * _Nonnull shared;)
+ (KRTInAppMessaging * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// アプリ内メッセージで発生するイベント等を委譲するためのデリゲートインスタンスを取得・設定します。
@property (nonatomic, weak) id <KRTInAppMessagingDelegate> _Nullable delegate;
/// アプリ内メッセージ表示用のWebViewが利用するプロセスプールを保持します。
/// なお以下のケースを除いてプロセスプールの設定を行う必要はありません。<br>
/// アプリ側で独自に用意したWebViewに紐付けられたセッションクッキーを <code>WKHTTPCookieStore</code> から取得するケース。
/// <code>WKWebsiteDataStore</code> の現在の実装では、複数あるプロセスプールからひとつのプロセスプールを選択して、そこからクッキー（セッションクッキーも含む）を得る仕様です。<br>
/// セッションクッキーはプロセスプールに紐付く仕様であるため、複数のプロセスプールが存在する状況下においてはセッションクッキーが取れない場合があります。<br>
/// これを回避するためには、アプリ側のWebViewとアプリ内メッセージ表示用のWebViewでプロセスプールを共有する必要があります。
@property (nonatomic, strong) WKProcessPool * _Nullable processPool;
/// アプリ内メッセージの表示有無を返します。
/// アプリ内メッセージが表示中の場合は <code>true</code> を返し、表示されていない場合は <code>false</code> を返します。
@property (nonatomic, readonly) BOOL isPresenting;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// ローダークラスが Objective-Cランライムに追加されたタイミングで呼び出されるメソッドです。
/// 本メソッドが呼び出されたタイミングで、<code>KarteApp</code> クラスに本クラスをライブラリとして登録します。
+ (void)_krt_load;
/// 指定したViewに関連するシーンにおけるアプリ内メッセージの表示有無を返します。
/// iOS12以下では、<code>isPresenting</code> と同様の挙動になります。
/// \param view シーンに関連するView
///
///
/// returns:
/// アプリ内メッセージが表示中の場合は <code>true</code> を返し、表示されていない場合は <code>false</code> を返します。
- (BOOL)isPresentingWithView:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// 現在表示中の全てのアプリ内メッセージを非表示にします。
- (void)dismiss;
/// 指定したViewに関連するシーンに表示されているアプリ内メッセージを非表示にします。
/// iOS12以下では、 <code>dismiss()</code> と同様の挙動になります。
/// \param view シーンに関連するView
///
- (void)dismissWithView:(UIView * _Nonnull)view;
/// アプリ内メッセージの表示を抑制します。
/// なお既に表示されているアプリ内メッセージは、メソッドの呼び出しと同時に非表示となります。
- (void)suppress;
/// 指定したViewに関連するシーンにおけるアプリ内メッセージの表示を抑制します。
/// なお既に表示されているアプリ内メッセージは、メソッドの呼び出しと同時に非表示となります。
/// \param view シーンに関連するView
///
- (void)suppressWithView:(UIView * _Nonnull)view;
/// アプリ内メッセージの表示抑制状態を解除します。
- (void)unsuppress;
/// 指定したViewに関連するシーンにおけるアプリ内メッセージの表示抑制状態を解除します。
/// \param view シーンに関連するView
///
- (void)unsuppressWithView:(UIView * _Nonnull)view;
@end







@class UIScene;

/// アプリ内メッセージで発生するイベントを委譲するためのタイプです。
SWIFT_PROTOCOL_NAMED("InAppMessagingDelegate")
@protocol KRTInAppMessagingDelegate
@optional
/// アプリ内メッセージ用のWindowが表示されたことを通知します。
/// なお iOS13 または iPadOS で実行されている場合かつ <code>inAppMessagingWindowIsPresented(_:onScene:)</code> が実装されている場合は、本メソッドは呼び出されません。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
- (void)inAppMessagingWindowIsPresented:(KRTInAppMessaging * _Nonnull)inAppMessaging;
/// アプリ内メッセージ用のWindowが表示されたことを通知します。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
/// \param scene シーン
///
- (void)inAppMessagingWindowIsPresented:(KRTInAppMessaging * _Nonnull)inAppMessaging onScene:(UIScene * _Nonnull)scene SWIFT_AVAILABILITY(ios,introduced=13.0);
/// アプリ内メッセージ用のWindowが非表示になったことを通知します。
/// なお iOS13 または iPadOS で実行されている場合かつ <code>inAppMessagingWindowIsDismissed(_:onScene:)</code> が実装されている場合は、本メソッドは呼び出されません。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
- (void)inAppMessagingWindowIsDismissed:(KRTInAppMessaging * _Nonnull)inAppMessaging;
/// アプリ内メッセージ用のWindowが非表示になったことを通知します。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
/// \param scene シーン
///
- (void)inAppMessagingWindowIsDismissed:(KRTInAppMessaging * _Nonnull)inAppMessaging onScene:(UIScene * _Nonnull)scene SWIFT_AVAILABILITY(ios,introduced=13.0);
/// 接客サービスアクションが表示されたことを通知します。
/// なお iOS13 または iPadOS で実行されている場合かつ <code>inAppMessagingIsPresented(_:onScene:campaignId:shortenId)</code> が実装されている場合は、本メソッドは呼び出されません。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
/// \param campaignId 接客サービスのキャンペーンID
///
/// \param shortenId 接客サービスアクションの短縮ID
///
- (void)inAppMessagingIsPresented:(KRTInAppMessaging * _Nonnull)inAppMessaging campaignId:(NSString * _Nonnull)campaignId shortenId:(NSString * _Nonnull)shortenId;
/// 接客サービスアクションが表示されたことを通知します。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
/// \param campaignId 接客サービスのキャンペーンID
///
/// \param shortenId 接客サービスアクションの短縮ID
///
/// \param scene シーン
///
- (void)inAppMessagingIsPresented:(KRTInAppMessaging * _Nonnull)inAppMessaging campaignId:(NSString * _Nonnull)campaignId shortenId:(NSString * _Nonnull)shortenId onScene:(UIScene * _Nonnull)scene SWIFT_AVAILABILITY(ios,introduced=13.0);
/// 接客サービスアクションが非表示になったことを通知します。
/// なお iOS13 または iPadOS で実行されている場合かつ <code>inAppMessagingIsDismissed(_:onScene:campaignId:shortenId)</code> が実装されている場合は、本メソッドは呼び出されません。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
/// \param campaignId 接客サービスのキャンペーンID
///
/// \param shortenId 接客サービスアクションの短縮ID
///
- (void)inAppMessagingIsDismissed:(KRTInAppMessaging * _Nonnull)inAppMessaging campaignId:(NSString * _Nonnull)campaignId shortenId:(NSString * _Nonnull)shortenId;
/// 接客サービスアクションが非表示になったことを通知します。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
/// \param campaignId 接客サービスのキャンペーンID
///
/// \param shortenId 接客サービスアクションの短縮ID
///
/// \param scene シーン
///
- (void)inAppMessagingIsDismissed:(KRTInAppMessaging * _Nonnull)inAppMessaging campaignId:(NSString * _Nonnull)campaignId shortenId:(NSString * _Nonnull)shortenId onScene:(UIScene * _Nonnull)scene SWIFT_AVAILABILITY(ios,introduced=13.0);
/// 接客サービスアクション中のボタンがクリックされた際に、リンクをSDK側で自動的に処理するかどうか問い合わせます。
/// なお iOS13 または iPadOS で実行されている場合かつ <code>inAppMessaging(_:onScene:shouldOpenURL:campaignId:shortenId)</code> が実装されている場合は、本メソッドは呼び出されません。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
/// \param url リンクURL
///
///
/// returns:
/// <code>true</code> を返した場合はSDK側でリンクを自動で開きます。<code>false</code> を返した場合はSDK側では何もしません。
- (BOOL)inAppMessaging:(KRTInAppMessaging * _Nonnull)inAppMessaging shouldOpenURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// 接客サービスアクション中のボタンがクリックされた際に、リンクをSDK側で自動的に処理するかどうか問い合わせます。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
/// \param url リンクURL
///
/// \param scene シーン
///
///
/// returns:
/// <code>true</code> を返した場合はSDK側でリンクを自動で開きます。<code>false</code> を返した場合はSDK側では何もしません。
- (BOOL)inAppMessaging:(KRTInAppMessaging * _Nonnull)inAppMessaging shouldOpenURL:(NSURL * _Nonnull)url onScene:(UIScene * _Nonnull)scene SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=13.0);
@end


/// アプリ内メッセージのプレビュー処理を行うクラスです。
SWIFT_CLASS_NAMED("Preview")
@interface KRTPreview : NSObject
/// ローダークラスが Objective-Cランライムに追加されたタイミングで呼び出されるメソッドです。
/// 本メソッドが呼び出されたタイミングで、<code>KarteApp</code> クラスに本クラスをライブラリとして登録します。
+ (void)_krt_load;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end













#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KarteInAppMessaging",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol KRTInAppMessagingDelegate;
@class WKProcessPool;
@class UIView;

/// アプリ内メッセージの管理を行うクラスです。
SWIFT_CLASS_NAMED("InAppMessaging")
@interface KRTInAppMessaging : NSObject
/// 共有インスタンスを返します。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KRTInAppMessaging * _Nonnull shared;)
+ (KRTInAppMessaging * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// アプリ内メッセージで発生するイベント等を委譲するためのデリゲートインスタンスを取得・設定します。
@property (nonatomic, weak) id <KRTInAppMessagingDelegate> _Nullable delegate;
/// アプリ内メッセージ表示用のWebViewが利用するプロセスプールを保持します。
/// なお以下のケースを除いてプロセスプールの設定を行う必要はありません。<br>
/// アプリ側で独自に用意したWebViewに紐付けられたセッションクッキーを <code>WKHTTPCookieStore</code> から取得するケース。
/// <code>WKWebsiteDataStore</code> の現在の実装では、複数あるプロセスプールからひとつのプロセスプールを選択して、そこからクッキー（セッションクッキーも含む）を得る仕様です。<br>
/// セッションクッキーはプロセスプールに紐付く仕様であるため、複数のプロセスプールが存在する状況下においてはセッションクッキーが取れない場合があります。<br>
/// これを回避するためには、アプリ側のWebViewとアプリ内メッセージ表示用のWebViewでプロセスプールを共有する必要があります。
@property (nonatomic, strong) WKProcessPool * _Nullable processPool;
/// アプリ内メッセージの表示有無を返します。
/// アプリ内メッセージが表示中の場合は <code>true</code> を返し、表示されていない場合は <code>false</code> を返します。
@property (nonatomic, readonly) BOOL isPresenting;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// ローダークラスが Objective-Cランライムに追加されたタイミングで呼び出されるメソッドです。
/// 本メソッドが呼び出されたタイミングで、<code>KarteApp</code> クラスに本クラスをライブラリとして登録します。
+ (void)_krt_load;
/// 指定したViewに関連するシーンにおけるアプリ内メッセージの表示有無を返します。
/// iOS12以下では、<code>isPresenting</code> と同様の挙動になります。
/// \param view シーンに関連するView
///
///
/// returns:
/// アプリ内メッセージが表示中の場合は <code>true</code> を返し、表示されていない場合は <code>false</code> を返します。
- (BOOL)isPresentingWithView:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// 現在表示中の全てのアプリ内メッセージを非表示にします。
- (void)dismiss;
/// 指定したViewに関連するシーンに表示されているアプリ内メッセージを非表示にします。
/// iOS12以下では、 <code>dismiss()</code> と同様の挙動になります。
/// \param view シーンに関連するView
///
- (void)dismissWithView:(UIView * _Nonnull)view;
/// アプリ内メッセージの表示を抑制します。
/// なお既に表示されているアプリ内メッセージは、メソッドの呼び出しと同時に非表示となります。
- (void)suppress;
/// 指定したViewに関連するシーンにおけるアプリ内メッセージの表示を抑制します。
/// なお既に表示されているアプリ内メッセージは、メソッドの呼び出しと同時に非表示となります。
/// \param view シーンに関連するView
///
- (void)suppressWithView:(UIView * _Nonnull)view;
/// アプリ内メッセージの表示抑制状態を解除します。
- (void)unsuppress;
/// 指定したViewに関連するシーンにおけるアプリ内メッセージの表示抑制状態を解除します。
/// \param view シーンに関連するView
///
- (void)unsuppressWithView:(UIView * _Nonnull)view;
@end







@class UIScene;

/// アプリ内メッセージで発生するイベントを委譲するためのタイプです。
SWIFT_PROTOCOL_NAMED("InAppMessagingDelegate")
@protocol KRTInAppMessagingDelegate
@optional
/// アプリ内メッセージ用のWindowが表示されたことを通知します。
/// なお iOS13 または iPadOS で実行されている場合かつ <code>inAppMessagingWindowIsPresented(_:onScene:)</code> が実装されている場合は、本メソッドは呼び出されません。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
- (void)inAppMessagingWindowIsPresented:(KRTInAppMessaging * _Nonnull)inAppMessaging;
/// アプリ内メッセージ用のWindowが表示されたことを通知します。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
/// \param scene シーン
///
- (void)inAppMessagingWindowIsPresented:(KRTInAppMessaging * _Nonnull)inAppMessaging onScene:(UIScene * _Nonnull)scene SWIFT_AVAILABILITY(ios,introduced=13.0);
/// アプリ内メッセージ用のWindowが非表示になったことを通知します。
/// なお iOS13 または iPadOS で実行されている場合かつ <code>inAppMessagingWindowIsDismissed(_:onScene:)</code> が実装されている場合は、本メソッドは呼び出されません。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
- (void)inAppMessagingWindowIsDismissed:(KRTInAppMessaging * _Nonnull)inAppMessaging;
/// アプリ内メッセージ用のWindowが非表示になったことを通知します。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
/// \param scene シーン
///
- (void)inAppMessagingWindowIsDismissed:(KRTInAppMessaging * _Nonnull)inAppMessaging onScene:(UIScene * _Nonnull)scene SWIFT_AVAILABILITY(ios,introduced=13.0);
/// 接客サービスアクションが表示されたことを通知します。
/// なお iOS13 または iPadOS で実行されている場合かつ <code>inAppMessagingIsPresented(_:onScene:campaignId:shortenId)</code> が実装されている場合は、本メソッドは呼び出されません。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
/// \param campaignId 接客サービスのキャンペーンID
///
/// \param shortenId 接客サービスアクションの短縮ID
///
- (void)inAppMessagingIsPresented:(KRTInAppMessaging * _Nonnull)inAppMessaging campaignId:(NSString * _Nonnull)campaignId shortenId:(NSString * _Nonnull)shortenId;
/// 接客サービスアクションが表示されたことを通知します。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
/// \param campaignId 接客サービスのキャンペーンID
///
/// \param shortenId 接客サービスアクションの短縮ID
///
/// \param scene シーン
///
- (void)inAppMessagingIsPresented:(KRTInAppMessaging * _Nonnull)inAppMessaging campaignId:(NSString * _Nonnull)campaignId shortenId:(NSString * _Nonnull)shortenId onScene:(UIScene * _Nonnull)scene SWIFT_AVAILABILITY(ios,introduced=13.0);
/// 接客サービスアクションが非表示になったことを通知します。
/// なお iOS13 または iPadOS で実行されている場合かつ <code>inAppMessagingIsDismissed(_:onScene:campaignId:shortenId)</code> が実装されている場合は、本メソッドは呼び出されません。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
/// \param campaignId 接客サービスのキャンペーンID
///
/// \param shortenId 接客サービスアクションの短縮ID
///
- (void)inAppMessagingIsDismissed:(KRTInAppMessaging * _Nonnull)inAppMessaging campaignId:(NSString * _Nonnull)campaignId shortenId:(NSString * _Nonnull)shortenId;
/// 接客サービスアクションが非表示になったことを通知します。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
/// \param campaignId 接客サービスのキャンペーンID
///
/// \param shortenId 接客サービスアクションの短縮ID
///
/// \param scene シーン
///
- (void)inAppMessagingIsDismissed:(KRTInAppMessaging * _Nonnull)inAppMessaging campaignId:(NSString * _Nonnull)campaignId shortenId:(NSString * _Nonnull)shortenId onScene:(UIScene * _Nonnull)scene SWIFT_AVAILABILITY(ios,introduced=13.0);
/// 接客サービスアクション中のボタンがクリックされた際に、リンクをSDK側で自動的に処理するかどうか問い合わせます。
/// なお iOS13 または iPadOS で実行されている場合かつ <code>inAppMessaging(_:onScene:shouldOpenURL:campaignId:shortenId)</code> が実装されている場合は、本メソッドは呼び出されません。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
/// \param url リンクURL
///
///
/// returns:
/// <code>true</code> を返した場合はSDK側でリンクを自動で開きます。<code>false</code> を返した場合はSDK側では何もしません。
- (BOOL)inAppMessaging:(KRTInAppMessaging * _Nonnull)inAppMessaging shouldOpenURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// 接客サービスアクション中のボタンがクリックされた際に、リンクをSDK側で自動的に処理するかどうか問い合わせます。
/// \param inAppMessaging アプリ内メッセージインスタンス
///
/// \param url リンクURL
///
/// \param scene シーン
///
///
/// returns:
/// <code>true</code> を返した場合はSDK側でリンクを自動で開きます。<code>false</code> を返した場合はSDK側では何もしません。
- (BOOL)inAppMessaging:(KRTInAppMessaging * _Nonnull)inAppMessaging shouldOpenURL:(NSURL * _Nonnull)url onScene:(UIScene * _Nonnull)scene SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=13.0);
@end


/// アプリ内メッセージのプレビュー処理を行うクラスです。
SWIFT_CLASS_NAMED("Preview")
@interface KRTPreview : NSObject
/// ローダークラスが Objective-Cランライムに追加されたタイミングで呼び出されるメソッドです。
/// 本メソッドが呼び出されたタイミングで、<code>KarteApp</code> クラスに本クラスをライブラリとして登録します。
+ (void)_krt_load;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end













#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
